C51 COMPILER V9.02   EEPROM                                                                07/04/2016 15:49:08 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\00-libfiles\eeprom.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\00-libfiles) 
                    -DEBUG OBJECTEXTEND PRINT(.\eeprom.lst) TABS(2) OBJECT(.\eeprom.obj)

line level    source

   1          /***************************************************************************************************
   2                                              ExploreEmbedded Copyright Notice    
   3          ****************************************************************************************************
   4           * File:   eeprom.c
   5           * Version: 15.0
   6           * Author: ExploreEmbedded
   7           * Website: http://www.exploreembedded.com/wiki
   8           * Description: Contains the library routines for Eeprom Read-Write
   9          
  10          This code has been developed and tested on ExploreEmbedded boards.  
  11          We strongly believe that the library works on any of development boards for respective controllers. 
  12          Check this link http://www.exploreembedded.com/wiki for awesome tutorials on 8051,PIC,AVR,ARM,Robotics,RTO
             -S,IOT.
  13          ExploreEmbedded invests substantial time and effort developing open source HW and SW tools, to support con
             -sider buying the ExploreEmbedded boards.
  14           
  15          The ExploreEmbedded libraries and examples are licensed under the terms of the new-bsd license(two-clause 
             -bsd license).
  16          See also: http://www.opensource.org/licenses/bsd-license.php
  17          
  18          EXPLOREEMBEDDED DISCLAIMS ANY KIND OF HARDWARE FAILURE RESULTING OUT OF USAGE OF LIBRARIES, DIRECTLY OR
  19          INDIRECTLY. FILES MAY BE SUBJECT TO CHANGE WITHOUT PRIOR NOTICE. THE REVISION HISTORY CONTAINS THE INFORMA
             -TION 
  20          RELATED TO UPDATES.
  21           
  22          
  23          Permission to use, copy, modify, and distribute this software and its documentation for any purpose
  24          and without fee is hereby granted, provided that this copyright notices appear in all copies 
  25          and that both those copyright notices and this permission notice appear in supporting documentation.
  26          ***************************************************************************************************/
  27          
  28          
  29          
  30          /***************************************************************************************************
  31                                       Revision History
  32          ****************************************************************************************************
  33          15.0: Initial version 
  34          ***************************************************************************************************/
  35          #include"eeprom.h"
  36          #include"i2c.h"
  37          #include"delay.h"
  38          
  39          
  40          
  41          /***************************************************************************************************
  42            void EEPROM_WriteByte(uint16_t v_eepromAddress_u16, uint8_t v_eepromData_u8)
  43          ***************************************************************************************************
  44           * I/P Arguments: uint16_t: eeprom_address at which eeprom_data is to be written
  45                            uint8_t: byte of data to be to be written in eeprom.
  46           * Return value    : none
  47          
  48           * description:This function is used to write the data at specified EEPROM_address..
  49                         At24xx ic is enabled by sending its ID on the i2c bus.
  50                         After selecting At24xx ic,select the address where the data is to written
C51 COMPILER V9.02   EEPROM                                                                07/04/2016 15:49:08 PAGE 2   

  51                         Write the Data at selected EppromAddress
  52                         Stop the I2c communication.
  53          
  54          
  55          
  56              AT24xxx eeprom has two different memory addressing depending on the size of the.
  57              At24C01-At24C16 have single byte memory address where as AT24C32 to AT24C256 have 2-byte address.
  58          
  59              Further the AT24xxx series eeproms have the memory structure divided into pages.
  60              Size of the page depends on the IC series ex:At24C04 has 8-byte page where as AT24C04 has 16-bytes.
  61          
  62              -----------------------------------------------------------------------------------------
  63                                  SingleByteAddress: AT24C01 - AT24C16
  64              ----------------------------------------------------------------------------------------*
  65              For single byte memory address, the actual address is obtained by the below formula.
  66              Actual page address = PageNumber * PageSize + Offset.
  67              ex: if address is 700(2*256 + 188) then the actual memory location is 188th byte of page 2(PageSize = 
             -256)
  68              For a 16bit address d8-d10 represents the Page number and d0-d7 the byte number in that page.
  69          
  70              The page number has to be given as the part of eeprom Id(d1-d3)
  71              The Byte number within the page should be the address, which is sent after the device ID
  72              ------------------------------------------------------------------------------------------
  73          
  74          
  75          
  76              -----------------------------------------------------------------------------------------
  77                                  DoubleByteAddress: AT24C32 - AT24C256
  78              -----------------------------------------------------------------------------------------
  79               For Double byte address, the 16bit address has to be sent as two bytes first MSB(D15 - D8)
  80               followed by LSB(D7 - D0)
  81              -----------------------------------------------------------------------------------------
  82          
  83          
  84              Note: User doesn't have to worry about the address decoding as the library takes care of it.
  85                    It is just an info, so that proper IC needs to be selected in the eeprom.h file.        
  86          
  87          ***************************************************************************************************/
  88          void EEPROM_WriteByte(uint16_t v_eepromAddress_u16, uint8_t v_eepromData_u8)
  89          {    
  90   1      
  91   1          uint8_t v_eepromLowerAddress_u8;
  92   1          uint8_t v_eepromPageNumber_u8;
  93   1          uint8_t v_eepromId_u8 = C_EepromIdWriteMode_U8;
  94   1          
  95   1          #if (C_EepromIcType_U16 >  AT24C16)
                      uint8_t v_eepromHigherAddress_u8;
                  #endif
  98   1      
  99   1          if(v_eepromAddress_u16 < C_MaxEepromSize_U16)    
 100   1          {
 101   2              v_eepromLowerAddress_u8 = util_ExtractByte0to8(v_eepromAddress_u16);
 102   2      
 103   2      #if (C_EepromIcType_U16 >  AT24C16)
                      v_eepromHigherAddress_u8 = util_ExtractByte8to16(v_eepromAddress_u16);
              #else
 106   2              v_eepromPageNumber_u8 = util_ExtractByte8to16(v_eepromAddress_u16);
 107   2              v_eepromId_u8 = v_eepromId_u8 | (v_eepromPageNumber_u8 << 1); 
 108   2      #endif
 109   2      
 110   2              I2C_Start();                       // Start i2c communication
 111   2                                                 // connect to At24xx by sending its ID on I2c Bus
C51 COMPILER V9.02   EEPROM                                                                07/04/2016 15:49:08 PAGE 3   

 112   2              I2C_Write(v_eepromId_u8); 
 113   2      #if (C_EepromIcType_U16 >  AT24C16)    
                      I2C_Write(v_eepromHigherAddress_u8);
              #endif        
 116   2              I2C_Write(v_eepromLowerAddress_u8); // Select the Specified EEPROM address of At24xx
 117   2              I2C_Write(v_eepromData_u8);         // Write the data at specified address
 118   2              I2C_Stop();                           // Stop i2c communication after Writing the data
 119   2      
 120   2              DELAY_ms(10);                         // Write operation takes max 5ms, refer At24xx data sheet 
 121   2          }    
 122   1      }
 123          
 124          
 125          
 126          
 127          
 128          
 129          /***************************************************************************************************
 130                         uint8_t EEPROM_ReadByte(uint16_t v_eepromAddress_u16)
 131          ***************************************************************************************************
 132           * I/P Arguments: uint16_t: eeprom_address from where eeprom_data is to be read.
 133           * Return value    : uint8_t: data read from Eeprom.
 134          
 135           * description:
 136                     This function is used to read the data from specified EEPROM_address.
 137                     At24xx ic is enabled by sending its ID on the i2c bus.
 138                     After selecting At24xx ic,select the address from where the data is to read
 139                     Read the Data from selected EppromAddress
 140                     Stop the I2c communication.
 141                     Return the Data read from Eeprom
 142          
 143          
 144              AT24xxx eeprom has two different memory addressing depending on the size of the.
 145              At24C01-At24C16 have single byte memory address where as AT24C32 to AT24C256 have 2-byte address.
 146          
 147              Further the AT24xxx series eeproms have the memory structure divided into pages.
 148              Size of the page depends on the IC series ex:At24C04 has 8-byte page where as AT24C04 has 16-bytes.
 149          
 150              -----------------------------------------------------------------------------------------
 151                                  SingleByteAddress: AT24C01 - AT24C16
 152              ----------------------------------------------------------------------------------------*
 153              For single byte memory address, the actual address is obtained by the below formula.
 154              Actual page address = PageNumber * PageSize + Offset.
 155              ex: if address is 700(2*256 + 188) then the actual memory location is 188th byte of page 2(PageSize = 
             -256)
 156              For a 16bit address d8-d10 represents the Page number and d0-d7 the byte number in that page.
 157          
 158              The page number has to be given as the part of eeprom Id(d1-d3)
 159              The Byte number within the page should be the address, which is sent after the device ID
 160              ------------------------------------------------------------------------------------------
 161          
 162          
 163          
 164              -----------------------------------------------------------------------------------------
 165                                  DoubleByteAddress: AT24C32 - AT24C256
 166              -----------------------------------------------------------------------------------------
 167               For Double byte address, the 16bit address has to be sent as two bytes, first MSB(D15 - D8)
 168               followed by LSB(D7 - D0)
 169              -----------------------------------------------------------------------------------------
 170          
 171          
 172              Note: User doesn't have to worry about the address decoding as the library takes care of it.
C51 COMPILER V9.02   EEPROM                                                                07/04/2016 15:49:08 PAGE 4   

 173                    It is just an info, so that proper IC needs to be selected in the eeprom.h file.        
 174          
 175          ***************************************************************************************************/      
             -     
 176          uint8_t EEPROM_ReadByte(uint16_t v_eepromAddress_u16)
 177          {
 178   1          uint8_t v_eepromLowerAddress_u8;
 179   1          uint8_t v_eepromPageNumber_u8;
 180   1          uint8_t v_eepromData_u8 = 0x00;
 181   1          uint8_t v_eepromId_u8 = C_EepromIdWriteMode_U8;
 182   1          #if (C_EepromIcType_U16 >  AT24C16)
                  uint8_t v_eepromHigherAddress_u8;
                  #endif
 185   1      
 186   1          if(v_eepromAddress_u16 < C_MaxEepromSize_U16)    
 187   1          {
 188   2              v_eepromLowerAddress_u8 = util_ExtractByte0to8(v_eepromAddress_u16);
 189   2      
 190   2      #if (C_EepromIcType_U16 >  AT24C16)
                      v_eepromHigherAddress_u8 = util_ExtractByte8to16(v_eepromAddress_u16);
              #else
 193   2              v_eepromPageNumber_u8 = util_ExtractByte8to16(v_eepromAddress_u16);
 194   2              v_eepromId_u8 = v_eepromId_u8 | (v_eepromPageNumber_u8 << 1); 
 195   2      #endif
 196   2      
 197   2              I2C_Start();                        // Start i2c communication
 198   2                                                  // connect to At24xx by sending its ID on I2c Bus
 199   2              I2C_Write(v_eepromId_u8); 
 200   2      #if (C_EepromIcType_U16 >  AT24C16)    
                      I2C_Write(v_eepromHigherAddress_u8);
              #endif        
 203   2              I2C_Write(v_eepromLowerAddress_u8); // Select the Specified EEPROM address of At24xx
 204   2      
 205   2              I2C_Start();                          // Start i2c communication after selecting the address
 206   2              I2C_Write(v_eepromId_u8 | 0x01);    // connect to At24xx(read) by sending its ID on I2c Bus
 207   2              v_eepromData_u8 = I2C_Read(0);      // Read the data from specified address
 208   2              I2C_Stop();                           // Stop i2c communication after Reading the data
 209   2              DELAY_us(10);
 210   2      
 211   2          }
 212   1          return v_eepromData_u8;             // Return the data read from eeprom
 213   1      }
 214          
 215          
 216          
 217          
 218          
 219          /***************************************************************************************************
 220          void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, uint8_t *ptr_ramAddress_u8, uint16_t v_numOfBytes_u1
             -6)
 221          ***************************************************************************************************
 222           * I/P Arguments: uint16_t,: eeprom_address from where the N-bytes are to be written.
 223                            uint8_t*: Buffer(Pointer) containing the N-Bytes of data to be written in Eeprom.
 224                            uint16_t :  Number of bytes to be written
 225          
 226           * Return value    : none
 227          
 228           * description:
 229                      This function is used to write N-bytes of data at specified EEPROM_address.
 230          ****************************************************************************************************/
 231          #if ( ENABLE_EEPROM_WriteNBytes == 1)
              void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, uint8_t *ptr_ramAddress_u8, uint16_t v_numOfBytes_u1
C51 COMPILER V9.02   EEPROM                                                                07/04/2016 15:49:08 PAGE 5   

             -6)
              {
                  while(v_numOfBytes_u16 !=  0)
                  {
                      EEPROM_WriteByte(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
                      v_eepromAddress_u16++;                       //Increment the Eeprom Address
                      ptr_ramAddress_u8++;                           //Increment the RAM Address
                      v_numOfBytes_u16--;                       //Decrement NoOfBytes after writing each Byte
                  }
              }
              #endif
 243          
 244          
 245          
 246          
 247          
 248          /***************************************************************************************************
 249          void EEPROM_ReadNBytes(uint16_t EepromAddr, uint8_t *RamAddr, uint16_t NoOfBytes)
 250          ***************************************************************************************************
 251           * I/P Arguments: uint16_t,: eeprom_address from where the N-bytes is to be read.
 252                            uint8_t*: Pointer to copy the N-bytes read from Eeprom.
 253                            uint16_t :  Number of bytes to be Read
 254          
 255           * Return value    : none
 256          
 257           * description:
 258                      This function is used to Read N-bytes of data from specified EEPROM_address.
 259                      The data read from the eeprom will be copied into the specified RamAddress.
 260          
 261              ##Note:    Care should be taken to allocate enough buffer to read the data.
 262          ****************************************************************************************************/
 263          #if ( ENABLE_EEPROM_ReadNBytes == 1)
              void EEPROM_ReadNBytes(uint16_t v_eepromAddress_16, uint8_t *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
              {
                  while(v_numOfBytes_u16 !=  0)
                  {
                      *ptr_ramAddress_u8 = EEPROM_ReadByte(v_eepromAddress_16);//Read a byte from EEPROM to RAM
                      v_eepromAddress_16++;                        //Increment the EEPROM Address
                      ptr_ramAddress_u8++;                            //Increment the RAM Address
                      v_numOfBytes_u16--;                        //Decrement NoOfBytes after Reading each Byte
              
                  }
              }
              #endif
 276          
 277          
 278          
 279          
 280          
 281          
 282          
 283          /***************************************************************************************************
 284           void EEPROM_WriteString(uint16_t v_eepromAddress_u16, char *ptr_stringPointer_u8)
 285          ***************************************************************************************************
 286           * I/P Arguments: uint16_t,: eeprom_address where the String is to be written.
 287                            char*: Pointer to String which has to be written.
 288          
 289           * Return value    : none
 290          
 291           * description:This function is used to Write a String at specified EEPROM_address.
 292          
 293             NOTE: Null char is also written into the eeprom.
C51 COMPILER V9.02   EEPROM                                                                07/04/2016 15:49:08 PAGE 6   

 294          ***************************************************************************************************/
 295          #if ( ENABLE_EEPROM_WriteString == 1)
              void EEPROM_WriteString(uint16_t v_eepromAddress_u16, char *ptr_stringPointer_u8)
              {
                  do
                  {
                      EEPROM_WriteByte(v_eepromAddress_u16,*ptr_stringPointer_u8); //Write a byte from RAM to EEPROM
                      ptr_stringPointer_u8++;                                //Increment the RAM Address
                      v_eepromAddress_u16++;                                //Increment the Eeprom Address
                  }while(*(ptr_stringPointer_u8-1) !=0);
              }
              #endif
 306          
 307          
 308          
 309          
 310          /***************************************************************************************************
 311          void EEPROM_ReadString(uint16_t v_eepromAddress_u16, char *ptr_destStringAddress_u8)
 312          ****************************************************************************************************
 313           * I/P Arguments: uint16_t,: eeprom_address from where the String is to be read.
 314                            char*: Pointer into which the String is to be read.
 315          
 316           * Return value    : none
 317          
 318           * description:This function is used to Read a String from specified EEPROM_address.
 319                     The string read from eeprom will be copied to specified buffer along with NULL character
 320          ****************************************************************************************************/
 321          #if ( ENABLE_EEPROM_ReadString == 1)
              void EEPROM_ReadString(uint16_t v_eepromAddress_u16, char *ptr_destStringAddress_u8)
              {
                  char eeprom_data;
              
                  do
                  {
                      eeprom_data = EEPROM_ReadByte(v_eepromAddress_u16); //Read a byte from EEPROM to RAM
                      *ptr_destStringAddress_u8 = eeprom_data;             //Copy the data into String Buffer
                      ptr_destStringAddress_u8++;                         //Increment the RAM Address
                      v_eepromAddress_u16++;                             //Increment the Eeprom Address
                  }while(eeprom_data!=0);
              }
              #endif
 335          
 336          
 337          
 338          
 339          
 340          /***************************************************************************************************
 341                                             void EEPROM_Erase(void)
 342          ****************************************************************************************************
 343           * I/P Arguments: none
 344          
 345           * Return value    : none
 346          
 347           * description: This function is used to erase the entire Eeprom memory.
 348                         Complete Eeprom(C_MaxEepromSize_U16) is filled with 0xFF to accomplish the Eeprom Erase.
 349          ****************************************************************************************************/
 350          #if ( ENABLE_EEPROM_Erase == 1)
              void EEPROM_Erase(void)
              {
                  uint16_t v_eepromAddress_u16;
              
                  for(v_eepromAddress_u16=0;v_eepromAddress_u16<C_MaxEepromSize_U16;v_eepromAddress_u16++)
C51 COMPILER V9.02   EEPROM                                                                07/04/2016 15:49:08 PAGE 7   

                  {
                      EEPROM_WriteByte(v_eepromAddress_u16,0xffu); // Write Each memory location with OxFF
                  }
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    116    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
